{"version":3,"file":"timer-24h-card.js","sources":["src/timer-24h-card.ts"],"sourcesContent":["/**\r\n * Timer 24H Card for Home Assistant\r\n * \r\n * A Lovelace card that provides a UI for managing 24-hour schedules\r\n * with server-side integration support.\r\n */\r\n\r\nimport { LitElement, html, css, CSSResultGroup, TemplateResult, PropertyValues } from 'lit';\r\nimport { customElement, property, state } from 'lit/decorators.js';\r\n\r\n// Types for Home Assistant\r\nexport interface HomeAssistant {\r\n  config: any;\r\n  connection: any;\r\n  states: { [entity_id: string]: any };\r\n  services: { [domain: string]: { [service: string]: any } };\r\n  callService: (domain: string, service: string, data?: any) => Promise<any>;\r\n  callWS: (message: any) => Promise<any>;\r\n  localize: (key: string, ...args: any[]) => string;\r\n  language: string;\r\n  themes: any;\r\n  user: any;\r\n}\r\n\r\nexport interface LovelaceCard extends HTMLElement {\r\n  hass?: HomeAssistant;\r\n  setConfig(config: Timer24HCardConfig): void;\r\n  getCardSize?(): number;\r\n}\r\n\r\nexport interface LovelaceCardConfig {\r\n  type: string;\r\n  [key: string]: any;\r\n}\r\n\r\nexport interface Timer24HCardConfig extends LovelaceCardConfig {\r\n  title?: string;\r\n  schedule_id?: string;\r\n  show_preview?: boolean;\r\n  show_conditions?: boolean;\r\n  compact_mode?: boolean;\r\n  language?: string;\r\n}\r\n\r\nexport interface Schedule {\r\n  schedule_id: string;\r\n  target_entity_id: string;\r\n  slots: boolean[];\r\n  enabled: boolean;\r\n  timezone?: string;\r\n  conditions: Condition[];\r\n}\r\n\r\nexport interface Condition {\r\n  entity_id: string;\r\n  expected?: string;\r\n  policy: 'skip' | 'force_off' | 'defer';\r\n}\r\n\r\nexport interface ScheduleState {\r\n  desired_state?: boolean;\r\n  last_applied_state?: boolean;\r\n  last_condition_evaluation?: string;\r\n  next_tick_time?: string;\r\n}\r\n\r\n// Load translations dynamically\r\nclass I18n {\r\n  private static translations: { [lang: string]: any } = {};\r\n  \r\n  static async loadTranslations(lang: string): Promise<void> {\r\n    if (this.translations[lang]) return;\r\n    \r\n    try {\r\n      const response = await fetch(`/local/timer-24h-card/i18n/${lang}.json`);\r\n      this.translations[lang] = await response.json();\r\n    } catch (error) {\r\n      console.warn(`Failed to load translations for ${lang}, falling back to English`);\r\n      if (lang !== 'en') {\r\n        await this.loadTranslations('en');\r\n        this.translations[lang] = this.translations['en'];\r\n      }\r\n    }\r\n  }\r\n  \r\n  static t(lang: string, key: string, ...args: any[]): string {\r\n    const translations = this.translations[lang] || this.translations['en'] || {};\r\n    const keys = key.split('.');\r\n    let value = translations;\r\n    \r\n    for (const k of keys) {\r\n      value = value?.[k];\r\n      if (!value) break;\r\n    }\r\n    \r\n    if (typeof value === 'string') {\r\n      // Simple placeholder replacement\r\n      return value.replace(/\\{(\\w+)\\}/g, (match, placeholder) => {\r\n        const index = parseInt(placeholder);\r\n        return !isNaN(index) && args[index] !== undefined ? args[index] : match;\r\n      });\r\n    }\r\n    \r\n    return key; // Return key if translation not found\r\n  }\r\n}\r\n\r\n@customElement('timer-24h-card')\r\nexport class Timer24HCard extends LitElement implements LovelaceCard {\r\n  @property({ attribute: false }) public hass!: HomeAssistant;\r\n  @state() private config!: Timer24HCardConfig;\r\n  @state() private schedules: { [id: string]: Schedule } = {};\r\n  @state() private selectedScheduleId?: string;\r\n  @state() private currentSlot: number = 0;\r\n  @state() private nextSlotTime?: string;\r\n  @state() private loading = false;\r\n  @state() private error?: string;\r\n  @state() private language = 'en';\r\n\r\n  // Grid support for dashboard layout\r\n  public static getLayoutOptions() {\r\n    return {\r\n      grid_rows: 3,\r\n      grid_columns: 6,\r\n      grid_min_rows: 2,\r\n      grid_min_columns: 3\r\n    };\r\n  }\r\n\r\n  public getCardSize(): number {\r\n    return this.config?.compact_mode ? 2 : 3;\r\n  }\r\n\r\n  public static async getConfigElement() {\r\n    // Dynamically import the editor\r\n    await import('./timer-24h-card-editor.js');\r\n    return document.createElement('timer-24h-card-editor');\r\n  }\r\n\r\n  public static getStubConfig(): Timer24HCardConfig {\r\n    return {\r\n      type: 'custom:timer-24h-card',\r\n      title: 'Timer 24H',\r\n      show_preview: true,\r\n      show_conditions: true,\r\n      compact_mode: false\r\n    };\r\n  }\r\n\r\n  public setConfig(config: Timer24HCardConfig): void {\r\n    if (!config) {\r\n      throw new Error('Invalid configuration');\r\n    }\r\n\r\n    this.config = {\r\n      title: 'Timer 24H',\r\n      show_preview: true,\r\n      show_conditions: true,\r\n      compact_mode: false,\r\n      ...config\r\n    };\r\n\r\n    // Detect language\r\n    this.language = config.language || this.hass?.language || 'en';\r\n    \r\n    // Load translations\r\n    I18n.loadTranslations(this.language);\r\n  }\r\n\r\n  protected updated(changedProps: PropertyValues): void {\r\n    super.updated(changedProps);\r\n    \r\n    if (changedProps.has('hass') && this.hass) {\r\n      this.loadSchedules();\r\n    }\r\n  }\r\n\r\n  private async loadSchedules(): Promise<void> {\r\n    if (!this.hass) return;\r\n\r\n    try {\r\n      this.loading = true;\r\n      this.error = undefined;\r\n\r\n      // Get all schedules via WebSocket\r\n      const response = await this.hass.callWS({\r\n        type: 'timer24h/list'\r\n      });\r\n\r\n      // Get detailed schedule data\r\n      const schedulePromises = response.map(async (item: any) => {\r\n        const detail = await this.hass.callWS({\r\n          type: 'timer24h/get',\r\n          schedule_id: item.schedule_id\r\n        });\r\n        return detail;\r\n      });\r\n\r\n      const scheduleDetails = await Promise.all(schedulePromises);\r\n      \r\n      // Build schedules object\r\n      this.schedules = {};\r\n      for (const detail of scheduleDetails) {\r\n        if (detail && detail.schedule) {\r\n          this.schedules[detail.schedule.schedule_id] = detail.schedule;\r\n        }\r\n      }\r\n\r\n      // Get current time info\r\n      const allStates = await this.hass.callWS({\r\n        type: 'timer24h/get_all_states'\r\n      });\r\n\r\n      if (allStates) {\r\n        this.currentSlot = allStates.current_slot;\r\n        this.nextSlotTime = allStates.next_slot_time;\r\n      }\r\n\r\n      // Select first schedule if none selected\r\n      if (!this.selectedScheduleId && Object.keys(this.schedules).length > 0) {\r\n        this.selectedScheduleId = Object.keys(this.schedules)[0];\r\n      }\r\n\r\n    } catch (error) {\r\n      console.error('Failed to load schedules:', error);\r\n      this.error = I18n.t(this.language, 'messages.websocket_error');\r\n    } finally {\r\n      this.loading = false;\r\n    }\r\n  }\r\n\r\n  private async toggleSlot(slotIndex: number): Promise<void> {\r\n    if (!this.selectedScheduleId || !this.schedules[this.selectedScheduleId]) return;\r\n\r\n    const schedule = this.schedules[this.selectedScheduleId];\r\n    const newSlots = [...schedule.slots];\r\n    newSlots[slotIndex] = !newSlots[slotIndex];\r\n\r\n    try {\r\n      await this.hass.callService('timer24h', 'set_schedule', {\r\n        schedule_id: schedule.schedule_id,\r\n        target_entity_id: schedule.target_entity_id,\r\n        slots: newSlots,\r\n        enabled: schedule.enabled,\r\n        timezone: schedule.timezone\r\n      });\r\n\r\n      // Update local state\r\n      schedule.slots = newSlots;\r\n      this.requestUpdate();\r\n\r\n    } catch (error) {\r\n      console.error('Failed to update schedule:', error);\r\n      this.error = I18n.t(this.language, 'messages.service_call_failed');\r\n    }\r\n  }\r\n\r\n  private formatTime(hour: number, minute: number): string {\r\n    return `${hour.toString().padStart(2, '0')}:${minute.toString().padStart(2, '0')}`;\r\n  }\r\n\r\n  private getSlotTime(slotIndex: number): string {\r\n    const hour = Math.floor(slotIndex / 2);\r\n    const minute = (slotIndex % 2) * 30;\r\n    return this.formatTime(hour, minute);\r\n  }\r\n\r\n  private renderScheduleSelector(): TemplateResult {\r\n    const scheduleIds = Object.keys(this.schedules);\r\n    \r\n    if (scheduleIds.length === 0) {\r\n      return html`\r\n        <div class=\"no-schedules\">\r\n          ${I18n.t(this.language, 'card.no_schedules')}\r\n        </div>\r\n      `;\r\n    }\r\n\r\n    return html`\r\n      <div class=\"schedule-selector\">\r\n        <select @change=${this.onScheduleChange}>\r\n          ${scheduleIds.map(id => html`\r\n            <option value=\"${id}\" ?selected=${id === this.selectedScheduleId}>\r\n              ${id} (${this.schedules[id].target_entity_id})\r\n            </option>\r\n          `)}\r\n        </select>\r\n      </div>\r\n    `;\r\n  }\r\n\r\n  private onScheduleChange(e: Event): void {\r\n    const select = e.target as HTMLSelectElement;\r\n    this.selectedScheduleId = select.value;\r\n  }\r\n\r\n  private renderTimeGrid(): TemplateResult {\r\n    if (!this.selectedScheduleId || !this.schedules[this.selectedScheduleId]) {\r\n      return html``;\r\n    }\r\n\r\n    const schedule = this.schedules[this.selectedScheduleId];\r\n    const centerX = 200;\r\n    const centerY = 200;\r\n    const outerRadius = 180;\r\n    const innerRadius = 50;\r\n\r\n    return html`\r\n      <div class=\"timer-container\">\r\n        <svg class=\"timer-svg\" viewBox=\"0 0 400 400\">\r\n          <!-- Border circles -->\r\n          <circle cx=\"${centerX}\" cy=\"${centerY}\" r=\"${outerRadius}\" \r\n                  fill=\"none\" stroke=\"var(--divider-color)\" stroke-width=\"2\"/>\r\n          <circle cx=\"${centerX}\" cy=\"${centerY}\" r=\"${innerRadius}\" \r\n                  fill=\"none\" stroke=\"var(--divider-color)\" stroke-width=\"2\"/>\r\n          \r\n          <!-- Dividing lines -->\r\n          ${Array.from({ length: 24 }, (_, i) => {\r\n            const angle = (i * 360 / 24 - 90) * (Math.PI / 180);\r\n            const xInner = centerX + innerRadius * Math.cos(angle);\r\n            const yInner = centerY + innerRadius * Math.sin(angle);\r\n            const xOuter = centerX + outerRadius * Math.cos(angle);\r\n            const yOuter = centerY + outerRadius * Math.sin(angle);\r\n            return html`\r\n              <line x1=\"${xInner}\" y1=\"${yInner}\" x2=\"${xOuter}\" y2=\"${yOuter}\" \r\n                    stroke=\"var(--divider-color)\" stroke-width=\"1\"/>\r\n            `;\r\n          })}\r\n          \r\n          <!-- Outer ring (full hours) -->\r\n          ${Array.from({ length: 24 }, (_, hour) => {\r\n            const slotIndex = hour * 2;\r\n            const isActive = schedule.slots[slotIndex];\r\n            const isCurrent = this.currentSlot === slotIndex;\r\n            const sectorPath = this.createSectorPath(hour, 24, innerRadius, outerRadius, centerX, centerY);\r\n            const textPos = this.getTextPosition(hour, 24, (innerRadius + outerRadius) / 2, centerX, centerY);\r\n            \r\n            return html`\r\n              <path d=\"${sectorPath}\" \r\n                    fill=\"${isActive ? 'var(--primary-color)' : 'var(--card-background-color)'}\"\r\n                    stroke=\"${isCurrent ? 'var(--accent-color)' : 'var(--divider-color)'}\"\r\n                    stroke-width=\"${isCurrent ? '3' : '1'}\"\r\n                    class=\"sector\"\r\n                    @click=\"${() => this.toggleSlot(slotIndex)}\"/>\r\n              <text x=\"${textPos.x}\" y=\"${textPos.y + 3}\" \r\n                    text-anchor=\"middle\" font-size=\"10\" font-weight=\"bold\"\r\n                    class=\"sector-text\"\r\n                    fill=\"${isActive ? 'var(--text-primary-color)' : 'var(--primary-text-color)'}\">\r\n                ${this.getSlotTime(slotIndex)}\r\n              </text>\r\n            `;\r\n          })}\r\n          \r\n          <!-- Inner ring (half hours) -->\r\n          ${Array.from({ length: 24 }, (_, hour) => {\r\n            const slotIndex = hour * 2 + 1;\r\n            const isActive = schedule.slots[slotIndex];\r\n            const isCurrent = this.currentSlot === slotIndex;\r\n            const sectorPath = this.createSectorPath(hour, 24, 50, innerRadius, centerX, centerY);\r\n            const textPos = this.getTextPosition(hour, 24, (50 + innerRadius) / 2, centerX, centerY);\r\n            \r\n            return html`\r\n              <path d=\"${sectorPath}\" \r\n                    fill=\"${isActive ? 'var(--primary-color)' : 'var(--card-background-color)'}\"\r\n                    stroke=\"${isCurrent ? 'var(--accent-color)' : 'var(--divider-color)'}\"\r\n                    stroke-width=\"${isCurrent ? '3' : '1'}\"\r\n                    class=\"sector\"\r\n                    @click=\"${() => this.toggleSlot(slotIndex)}\"/>\r\n              <text x=\"${textPos.x}\" y=\"${textPos.y + 2}\" \r\n                    text-anchor=\"middle\" font-size=\"8\" font-weight=\"bold\"\r\n                    class=\"sector-text\"\r\n                    fill=\"${isActive ? 'var(--text-primary-color)' : 'var(--primary-text-color)'}\">\r\n                ${this.getSlotTime(slotIndex)}\r\n              </text>\r\n            `;\r\n          })}\r\n        </svg>\r\n      </div>\r\n    `;\r\n  }\r\n\r\n  private createSectorPath(hour: number, totalSectors: number, innerRadius: number, outerRadius: number, centerX: number, centerY: number): string {\r\n    const startAngle = (hour * 360 / totalSectors - 90) * (Math.PI / 180);\r\n    const endAngle = ((hour + 1) * 360 / totalSectors - 90) * (Math.PI / 180);\r\n    \r\n    const x1 = centerX + innerRadius * Math.cos(startAngle);\r\n    const y1 = centerY + innerRadius * Math.sin(startAngle);\r\n    const x2 = centerX + outerRadius * Math.cos(startAngle);\r\n    const y2 = centerY + outerRadius * Math.sin(startAngle);\r\n    const x3 = centerX + outerRadius * Math.cos(endAngle);\r\n    const y3 = centerY + outerRadius * Math.sin(endAngle);\r\n    const x4 = centerX + innerRadius * Math.cos(endAngle);\r\n    const y4 = centerY + innerRadius * Math.sin(endAngle);\r\n    \r\n    const largeArcFlag = endAngle - startAngle <= Math.PI ? 0 : 1;\r\n    \r\n    return `M ${x1} ${y1} L ${x2} ${y2} A ${outerRadius} ${outerRadius} 0 ${largeArcFlag} 1 ${x3} ${y3} L ${x4} ${y4} A ${innerRadius} ${innerRadius} 0 ${largeArcFlag} 0 ${x1} ${y1}`;\r\n  }\r\n\r\n  private getTextPosition(hour: number, totalSectors: number, radius: number, centerX: number, centerY: number): { x: number; y: number } {\r\n    const angle = ((hour + 0.5) * 360 / totalSectors - 90) * (Math.PI / 180);\r\n    const x = centerX + radius * Math.cos(angle);\r\n    const y = centerY + radius * Math.sin(angle);\r\n    return { x, y };\r\n  }\r\n\r\n  private renderScheduleInfo(): TemplateResult {\r\n    if (!this.selectedScheduleId || !this.schedules[this.selectedScheduleId]) {\r\n      return html``;\r\n    }\r\n\r\n    const schedule = this.schedules[this.selectedScheduleId];\r\n    const activeSlots = schedule.slots.filter(slot => slot).length;\r\n\r\n    return html`\r\n      <div class=\"schedule-info\">\r\n        <div class=\"info-item\">\r\n          <span class=\"label\">${I18n.t(this.language, 'schedule.target_entity')}:</span>\r\n          <span class=\"value\">${schedule.target_entity_id}</span>\r\n        </div>\r\n        <div class=\"info-item\">\r\n          <span class=\"label\">${I18n.t(this.language, 'schedule.active_slots')}:</span>\r\n          <span class=\"value\">${activeSlots} / 48</span>\r\n        </div>\r\n        <div class=\"info-item\">\r\n          <span class=\"label\">${I18n.t(this.language, 'card.current_slot')}:</span>\r\n          <span class=\"value\">${this.getSlotTime(this.currentSlot)}</span>\r\n        </div>\r\n        ${schedule.conditions.length > 0 ? html`\r\n          <div class=\"info-item\">\r\n            <span class=\"label\">${I18n.t(this.language, 'schedule.conditions')}:</span>\r\n            <span class=\"value\">${schedule.conditions.length}</span>\r\n          </div>\r\n        ` : ''}\r\n      </div>\r\n    `;\r\n  }\r\n\r\n  protected render(): TemplateResult {\r\n    if (this.loading) {\r\n      return html`\r\n        <ha-card>\r\n          <div class=\"card-content loading\">\r\n            ${I18n.t(this.language, 'common.loading')}\r\n          </div>\r\n        </ha-card>\r\n      `;\r\n    }\r\n\r\n    if (this.error) {\r\n      return html`\r\n        <ha-card>\r\n          <div class=\"card-content error\">\r\n            ${this.error}\r\n          </div>\r\n        </ha-card>\r\n      `;\r\n    }\r\n\r\n    return html`\r\n      <ha-card>\r\n        <div class=\"card-header\">\r\n          <div class=\"name\">${this.config.title}</div>\r\n        </div>\r\n        \r\n        <div class=\"card-content\">\r\n          ${this.renderScheduleSelector()}\r\n          ${this.renderTimeGrid()}\r\n          ${this.config.show_preview ? this.renderScheduleInfo() : ''}\r\n        </div>\r\n      </ha-card>\r\n    `;\r\n  }\r\n\r\n  static get styles(): CSSResultGroup {\r\n    return css`\r\n      :host {\r\n        display: block;\r\n      }\r\n\r\n      ha-card {\r\n        height: 100%;\r\n        display: flex;\r\n        flex-direction: column;\r\n      }\r\n\r\n      .card-header {\r\n        padding: 16px;\r\n        border-bottom: 1px solid var(--divider-color);\r\n      }\r\n\r\n      .name {\r\n        font-size: 1.2em;\r\n        font-weight: 500;\r\n        color: var(--primary-text-color);\r\n      }\r\n\r\n      .card-content {\r\n        padding: 16px;\r\n        flex: 1;\r\n        display: flex;\r\n        flex-direction: column;\r\n      }\r\n\r\n      .loading, .error {\r\n        text-align: center;\r\n        padding: 32px;\r\n        color: var(--secondary-text-color);\r\n      }\r\n\r\n      .error {\r\n        color: var(--error-color);\r\n      }\r\n\r\n      .no-schedules {\r\n        text-align: center;\r\n        padding: 32px;\r\n        color: var(--secondary-text-color);\r\n      }\r\n\r\n      .schedule-selector {\r\n        margin-bottom: 16px;\r\n      }\r\n\r\n      .schedule-selector select {\r\n        width: 100%;\r\n        padding: 8px;\r\n        border: 1px solid var(--divider-color);\r\n        border-radius: 4px;\r\n        background: var(--card-background-color);\r\n        color: var(--primary-text-color);\r\n      }\r\n\r\n      .timer-container {\r\n        flex: 1;\r\n        display: flex;\r\n        justify-content: center;\r\n        align-items: center;\r\n        min-height: 300px;\r\n      }\r\n\r\n      .timer-svg {\r\n        width: 100%;\r\n        height: 100%;\r\n        max-width: 400px;\r\n        max-height: 400px;\r\n      }\r\n\r\n      .sector {\r\n        cursor: pointer;\r\n        transition: opacity 0.2s;\r\n      }\r\n\r\n      .sector:hover {\r\n        opacity: 0.8;\r\n      }\r\n\r\n      .sector-text {\r\n        pointer-events: none;\r\n        user-select: none;\r\n      }\r\n\r\n      .schedule-info {\r\n        margin-top: 16px;\r\n        padding: 12px;\r\n        background: var(--secondary-background-color);\r\n        border-radius: 8px;\r\n      }\r\n\r\n      .info-item {\r\n        display: flex;\r\n        justify-content: space-between;\r\n        margin-bottom: 4px;\r\n      }\r\n\r\n      .info-item:last-child {\r\n        margin-bottom: 0;\r\n      }\r\n\r\n      .label {\r\n        color: var(--secondary-text-color);\r\n        font-size: 0.9em;\r\n      }\r\n\r\n      .value {\r\n        color: var(--primary-text-color);\r\n        font-weight: 500;\r\n        font-size: 0.9em;\r\n      }\r\n\r\n      /* Responsive adjustments */\r\n      @media (max-width: 600px) {\r\n        .timer-container {\r\n          min-height: 250px;\r\n        }\r\n        \r\n        .card-content {\r\n          padding: 12px;\r\n        }\r\n        \r\n        .sector-text {\r\n          font-size: 6px !important;\r\n        }\r\n      }\r\n    `;\r\n  }\r\n}\r\n\r\n// Register the card\r\nconsole.info(\r\n  '%c  TIMER-24H-CARD  %c  Version 1.0.0  ',\r\n  'color: orange; font-weight: bold; background: black',\r\n  'color: white; font-weight: bold; background: dimgray',\r\n);\r\n\r\n// Add to window for HACS\r\n(window as any).customCards = (window as any).customCards || [];\r\n(window as any).customCards.push({\r\n  type: 'timer-24h-card',\r\n  name: 'Timer 24H Card',\r\n  description: 'A 24-hour timer card with server-side integration support',\r\n  preview: true,\r\n  documentationURL: 'https://github.com/home-assistant-community/timer-24h'\r\n});\r\n"],"names":["_I18n","lang","response","key","args","translations","keys","value","k","match","placeholder","index","I18n","Timer24HCard","LitElement","config","changedProps","schedulePromises","item","scheduleDetails","detail","allStates","error","slotIndex","schedule","newSlots","hour","minute","scheduleIds","html","id","e","select","centerX","centerY","outerRadius","innerRadius","_","angle","xInner","yInner","xOuter","yOuter","isActive","isCurrent","sectorPath","textPos","totalSectors","startAngle","endAngle","x1","y1","x2","y2","x3","y3","x4","y4","largeArcFlag","radius","x","y","activeSlots","slot","css","__decorateClass","property","state","customElement"],"mappings":"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"}